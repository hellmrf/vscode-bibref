name: Publish to VS Code Marketplace

permissions:
  contents: write

on:
  release:
    types: [released, prereleased]
  workflow_dispatch:
    inputs:
      version:
        description: Version tag (vX.Y.Z)
        required: true

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node: [lts/*]
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2

      - name: Set node version to ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm

      - name: Install
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

      - name: Run tests
        run: pnpm run test

      - name: Test vsce pack
        run: |
          echo "\n\n  # vsce ls\n"
          pnpm exec vsce ls
          echo "\n\n  # vsce pack\n"
          pnpm exec vsce pack
          echo "\n\n  # du -h *.vsix\n"
          du -h *.vsix

  publish:
    runs-on: ubuntu-latest
    needs: test
    env:
      TAG_NAME: ${{ github.event.inputs.version }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2

      - name: Setup Node (LTS)
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
          cache: pnpm

      # Install & build
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

      # ───────────────────────────────
      # Derive version and release type
      #
      # v0.0.* => pré-release (MAJOR=MINOR=0)
      # v*.1.* => pré-release (MINOR is odd)
      # v*.2.* => release     (MINOR is even)
      # ───────────────────────────────
      - name: Is pre-release?
        id: semver
        run: |
          # Get version from tag input or from github release event
          if [[ -n "$TAG_NAME" ]]; then
              RAW="${TAG_NAME#v}"          # drop leading 'v'
          else
              RAW="${GITHUB_REF#refs/tags/v}"  # From release event, drop refs/tags/v
          fi

          echo "version=$RAW" >> "$GITHUB_OUTPUT"

          # For release events, use the event type directly
          if [[ "${{ github.event_name }}" == "release" ]]; then
              if [[ "${{ github.event.action }}" == "prereleased" ]]; then
                  echo "prerelease=yes" >> "$GITHUB_OUTPUT"
              else
                  echo "prerelease=no" >> "$GITHUB_OUTPUT"
              fi
          else
              # For manual workflow, determine by version pattern
              IFS='.' read -r MAJOR MINOR PATCH <<< "$RAW"
              if (( MINOR % 2 )) || (( MAJOR == 0 && MINOR == 0 )); then
                  echo "prerelease=yes" >> "$GITHUB_OUTPUT"   # odd or 0.0.x => pre-release
              else
                  echo "prerelease=no" >> "$GITHUB_OUTPUT"    # even => release
              fi
          fi

      # Publish
      - name: Publish to Marketplace
        run: |
          if [[ "${{ steps.semver.outputs.prerelease }}" == "yes" ]]; then
            pnpm run prepublish
          else
            pnpm run publish
          fi

        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
